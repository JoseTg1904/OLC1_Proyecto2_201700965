/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,3],$V2=[1,16],$V3=[1,15],$V4=[2,8],$V5=[1,21],$V6=[1,22],$V7=[2,34],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,42],$Vj=[2,40],$Vk=[1,56],$Vl=[1,55],$Vm=[2,6,12,22,23,24,25,26],$Vn=[2,36],$Vo=[1,68],$Vp=[1,71],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,69],$Vx=[1,70],$Vy=[2,25],$Vz=[18,19,30,37],$VA=[2,66],$VB=[1,93],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,94],$VP=[1,95],$VQ=[2,29],$VR=[18,19,30,37,39,48,49,50,51,52,53,54,55,56,57,58,59,60,61],$VS=[1,158],$VT=[1,159],$VU=[2,76],$VV=[1,155],$VW=[1,160],$VX=[1,161],$VY=[1,162],$VZ=[1,163],$V_=[1,164],$V$=[1,172],$V01=[2,9,12,22,23,24,25,26,70,76,79,80,82,84],$V11=[1,186],$V21=[1,191],$V31=[1,192],$V41=[1,187],$V51=[1,188],$V61=[1,189],$V71=[1,190],$V81=[1,204],$V91=[1,202],$Va1=[1,203],$Vb1=[2,106],$Vc1=[1,209],$Vd1=[2,87],$Ve1=[1,263];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"PublicoInterClas":4,"EOF":5,"tk_public":6,"InterClas":7,"tk_interface":8,"tk_identificador":9,"tk_llaveA":10,"Definicion":11,"tk_llaveC":12,"tk_class":13,"Instrucciones":14,"TipoFuncionDef":15,"tk_parA":16,"ParametrosDef":17,"tk_parC":18,"tk_puntoComa":19,"TipoFuncionDefIn":20,"tk_void":21,"tk_int":22,"tk_boolean":23,"tk_double":24,"tk_string":25,"tk_char":26,"TipoFuncion":27,"Tipo":28,"ListadoParametrosDef":29,"tk_coma":30,"Parametros":31,"ListadoParametros":32,"Declaracion":33,"Implementacion":34,"IdentificadorDeclaracion":35,"ListadoDeclaracion":36,"tk_igual":37,"expresion":38,"tk_menos":39,"expresionPrima":40,"tk_not":41,"tk_stringTexto":42,"tk_charTexto":43,"tk_numero":44,"tk_decimal":45,"tk_true":46,"tk_false":47,"tk_and":48,"tk_or":49,"tk_xor":50,"tk_adicion":51,"tk_sustraccion":52,"tk_mayor":53,"tk_menor":54,"tk_mayorIgual":55,"tk_menorIgual":56,"tk_igualacion":57,"tk_distinto":58,"tk_mas":59,"tk_por":60,"tk_division":61,"divTipoFuncion":62,"interno":63,"tk_static":64,"tk_main":65,"tk_corcheteA":66,"tk_corcheteC":67,"tk_args":68,"LlamadoAsignacion":69,"tk_system":70,"tk_punto":71,"tk_out":72,"divPrint":73,"internoLlave":74,"internoPunto":75,"tk_for":76,"DeclaracionFor":77,"internoCiclo":78,"tk_while":79,"tk_if":80,"ifElse":81,"tk_return":82,"tipoReturn":83,"tk_do":84,"tk_else":85,"comprobacionElif":86,"tk_print":87,"tk_println":88,"tk_break":89,"tk_continue":90,"ParametrosLlamado":91,"ListadoDeclaracionParametrosLlamado":92,"divLlamadoAsignacion":93,"IdentificadorDeclaracionFor":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_public",8:"tk_interface",9:"tk_identificador",10:"tk_llaveA",12:"tk_llaveC",13:"tk_class",16:"tk_parA",18:"tk_parC",19:"tk_puntoComa",21:"tk_void",22:"tk_int",23:"tk_boolean",24:"tk_double",25:"tk_string",26:"tk_char",30:"tk_coma",37:"tk_igual",39:"tk_menos",41:"tk_not",42:"tk_stringTexto",43:"tk_charTexto",44:"tk_numero",45:"tk_decimal",46:"tk_true",47:"tk_false",48:"tk_and",49:"tk_or",50:"tk_xor",51:"tk_adicion",52:"tk_sustraccion",53:"tk_mayor",54:"tk_menor",55:"tk_mayorIgual",56:"tk_menorIgual",57:"tk_igualacion",58:"tk_distinto",59:"tk_mas",60:"tk_por",61:"tk_division",64:"tk_static",65:"tk_main",66:"tk_corcheteA",67:"tk_corcheteC",68:"tk_args",70:"tk_system",71:"tk_punto",72:"tk_out",76:"tk_for",79:"tk_while",80:"tk_if",82:"tk_return",84:"tk_do",85:"tk_else",87:"tk_print",88:"tk_println",89:"tk_break",90:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,0],[7,6],[7,6],[7,2],[11,8],[11,0],[11,2],[15,1],[15,1],[20,1],[20,1],[20,1],[20,1],[20,1],[27,1],[27,1],[28,1],[28,1],[28,1],[28,1],[28,1],[17,3],[17,0],[29,2],[29,0],[31,3],[31,0],[32,2],[32,0],[14,2],[14,2],[14,0],[33,3],[33,2],[35,2],[36,3],[36,2],[36,0],[38,3],[38,3],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,2],[38,4],[40,3],[40,3],[40,3],[40,2],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,0],[34,2],[62,8],[62,12],[62,2],[63,2],[63,2],[63,6],[63,1],[63,1],[63,0],[74,12],[74,8],[74,9],[74,2],[75,4],[75,10],[75,2],[83,1],[83,0],[81,2],[81,0],[86,3],[86,8],[86,2],[73,5],[73,5],[73,2],[78,1],[78,3],[78,3],[78,2],[91,2],[91,2],[91,2],[91,2],[91,2],[91,2],[91,2],[92,2],[92,0],[69,2],[93,4],[93,3],[93,2],[77,2],[94,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var retorno = {tokens: listaTokens, erroresLexicos: listaErroresLexicos,
                                erroresSintacticos: listaErroresSintacticos, traducido: traduccion};
                                listaTokens = [];
                                listaErroresLexicos = [];
                                listaErroresSintacticos = [];
                                traduccion = "";
                                return retorno;
break;
case 5:
traduccion += $$[$0-5];
                                                                                        traduccion += " " + $$[$0-4];
                                                                                        traduccion += $$[$0-3] + "\n";
                                                                                        traduccion += $$[$0-2];
                                                                                        traduccion += "\n" + $$[$0-1] + "\n";
break;
case 6:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de clase o interfaz",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 9:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de metodos o funciones",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 28:
this.$ = "var " + $$[$0-1] + $$[$0]
break;
case 29: case 31: case 34: case 40:
this.$ = ""
break;
case 30: case 39:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 32: case 33: case 37:
this.$ = $$[$0-1] + $$[$0]
break;
case 35:
this.$ = "var " + $$[$0-1] + $$[$0] + "\n";
break;
case 36:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la declaracion de variables",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 38:
 this.$ = " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 41: case 42: case 51: case 52: case 53: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65:
this.$ = $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 54: case 55:
this.$ = $$[$0-1] + " " + $$[$0];
break;
case 50:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 66: case 76: case 85: case 87: case 106:
this.$ = "";
break;
case 67:
this.$ = $$[$0]
break;
case 68:
this.$ = "function " + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 69:
this.$ = "function main()" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 70:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la implementacion de funciones",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 71: case 72: case 73: case 86: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 107:
this.$ = $$[$0-1] + $$[$0];
break;
case 74: case 75: case 84: case 94:
this.$ = $$[$0];
break;
case 77:
this.$ = $$[$0-11] + $$[$0-10] + $$[$0-9] + $$[$0-8] + " " + $$[$0-7] + $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0];
break;
case 78: case 89:
this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0];
break;
case 79:
this.$ = $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + "\n" + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 80:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de for, while o if",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 81:
this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 82:
this.$ = $$[$0-9] + $$[$0-8] + "\n" + $$[$0-7] + "\n" + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 83:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de return o do while",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 88:
this.$ = $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 90:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de else o else if",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 91: case 92:
this.$ = "console.log" + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 93:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de impresion en consola",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 95: case 96:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 97:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en break o continue",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 108:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 109:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 110:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la la llamada de metodos, funciones o asignacion de variables",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 111:
this.$ = "var " + $$[$0];
break;
case 112:
this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1},{1:[3]},{5:[1,4]},{2:[1,8],7:5,8:[1,6],13:[1,7]},{1:[2,1]},{5:[2,2]},{9:[1,9]},{9:[1,10]},{12:[1,11]},{10:[1,12]},{10:[1,13]},{5:[2,6]},{2:$V2,6:$V3,11:14,12:$V4},{2:$V5,6:$V6,12:$V7,14:17,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:18,34:19},{12:[1,28]},{15:29,20:30,21:[1,31],22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},{19:[1,37]},{12:[1,38]},{2:$V5,6:$V6,12:$V7,14:39,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:18,34:19},{2:$V5,6:$V6,12:$V7,14:40,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:18,34:19},{9:$Vi,35:41},{19:[1,43]},{2:[1,47],21:[1,49],22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:45,28:48,62:44,64:[1,46]},{9:[2,19]},{9:[2,20]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{4:50,5:$V0,6:$V1},{9:[1,51]},{9:[2,10]},{9:[2,11]},{9:[2,12]},{9:[2,13]},{9:[2,14]},{9:[2,15]},{9:[2,16]},{12:[2,9]},{4:52,5:$V0,6:$V1},{12:[2,32]},{12:[2,33]},{19:[1,53]},{19:$Vj,30:$Vk,36:54,37:$Vl},o($Vm,$Vn),o($Vm,[2,67]),{9:[1,57]},{21:[1,58]},{12:[1,59]},{9:[2,17]},{9:[2,18]},{5:[2,4]},{16:[1,60]},{5:[2,5]},o([2,6,9,12,22,23,24,25,26,70,76,79,80,82,84],[2,35]),{19:[2,37]},{9:$Vo,16:$Vp,38:61,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vi,35:72},{16:[1,73]},{65:[1,74]},o($Vm,[2,70]),{17:75,18:$Vy,20:76,22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},{19:$Vj,30:$Vk,36:77,37:$Vl},{9:$Vo,16:$Vp,38:78,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:79,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($Vz,$VA,{40:80,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:96,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:97,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:98,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:99,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:100,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:101,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),{9:$Vo,16:$Vp,38:102,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{19:[2,39]},{18:$VQ,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:104,31:103},{16:[1,105]},{18:[1,106]},{9:[1,107]},{19:[2,38]},o($Vz,$VA,{40:108,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:109,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($VR,[2,43]),{9:$Vo,16:$Vp,38:110,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:111,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:112,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($Vz,$VA,{40:113,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:114,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),{9:$Vo,16:$Vp,38:115,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:116,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:117,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:118,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:119,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:120,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:121,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:122,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:123,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:124,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($VR,[2,44]),o($VR,[2,45]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),o($VR,[2,49]),{18:[1,125]},{18:[1,126]},{9:[1,127]},{25:[1,128]},{19:[1,129]},{18:[2,27],29:130,30:[1,131]},o($VR,[2,41]),o($VR,[2,42]),o($Vz,$VA,{40:132,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:133,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:134,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($VR,[2,54]),o($VR,[2,55]),o($Vz,$VA,{40:135,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:136,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:137,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:138,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:139,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:140,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:141,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:142,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:143,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:144,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),o($Vz,$VA,{40:145,39:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),{10:[1,146]},{18:[2,31],30:[1,148],32:147},{66:[1,149]},{2:$V2,6:$V3,11:150,12:$V4},{18:[2,24]},{17:151,18:$Vy,20:76,22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,56]),o($VR,[2,57]),o($VR,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,65]),o($VR,[2,50]),{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:152,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{18:[2,28]},{18:$VQ,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:104,31:165},{67:[1,166]},{12:[2,7]},{18:[2,26]},{12:[1,167]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:168,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:169,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{71:[1,170]},{12:[2,74]},{12:[2,75]},{12:$V$,19:[1,171]},{2:[1,176],16:[1,174],37:[1,175],93:173},{16:[1,177]},{16:[1,178]},{16:[1,179]},{9:$Vo,16:$Vp,19:[2,85],38:181,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,83:180},{10:[1,182]},{18:[2,30]},{68:[1,183]},o($Vm,[2,68]),{12:[2,71]},{12:[2,72]},{72:[1,184]},o($V01,$Vn),{12:[2,80]},o($V01,[2,107]),{9:$V11,42:$V21,43:$V31,44:$V41,45:$V51,46:$V61,47:$V71,91:185},{9:$Vo,16:$Vp,38:193,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{19:[1,194]},{22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:196,77:195},{9:$Vo,16:$Vp,38:197,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:198,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{19:[1,199]},{19:[2,84]},{2:$V81,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:201,69:154,70:$VV,74:156,75:157,76:$VW,78:200,79:$VX,80:$VY,82:$VZ,84:$V_,89:$V91,90:$Va1},{18:[1,205]},{71:[1,206]},{18:[1,207]},{18:$Vb1,30:$Vc1,92:208},{18:$Vb1,30:$Vc1,92:210},{18:$Vb1,30:$Vc1,92:211},{18:$Vb1,30:$Vc1,92:212},{18:$Vb1,30:$Vc1,92:213},{18:$Vb1,30:$Vc1,92:214},{18:$Vb1,30:$Vc1,92:215},{19:[1,216]},o($V01,[2,110]),{19:[1,217]},{9:[1,219],94:218},{18:[1,220]},{18:[1,221]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:222,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{12:[1,223]},{12:[2,94]},{19:[1,224]},{19:[1,225]},{12:$V$,19:[1,226]},{10:[1,227]},{2:[1,231],73:228,87:[1,229],88:[1,230]},{19:[1,232]},{18:[2,98]},{9:$V11,42:$V21,43:$V31,44:$V41,45:$V51,46:$V61,47:$V71,91:233},{18:[2,99]},{18:[2,100]},{18:[2,101]},{18:[2,102]},{18:[2,103]},{18:[2,104]},o($V01,[2,109]),{9:$Vo,16:$Vp,38:234,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{19:[2,111]},{37:[1,235]},{10:[1,236]},{10:[1,237]},{12:[2,81]},{79:[1,238]},{2:$V81,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:201,69:154,70:$VV,74:156,75:157,76:$VW,78:239,79:$VX,80:$VY,82:$VZ,84:$V_,89:$V91,90:$Va1},{2:$V81,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:201,69:154,70:$VV,74:156,75:157,76:$VW,78:240,79:$VX,80:$VY,82:$VZ,84:$V_,89:$V91,90:$Va1},o($V01,[2,97]),{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:241,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:242,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{16:[1,243]},{16:[1,244]},{19:[1,245]},o($V01,[2,108]),{18:[2,105]},{19:[1,246]},{9:$Vo,16:$Vp,38:247,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{2:$V81,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:201,69:154,70:$VV,74:156,75:157,76:$VW,78:248,79:$VX,80:$VY,82:$VZ,84:$V_,89:$V91,90:$Va1},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:249,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{16:[1,250]},{12:[2,95]},{12:[2,96]},{12:[1,251]},{12:[2,73]},{9:$Vo,16:$Vp,38:252,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{9:$Vo,16:$Vp,38:253,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($V01,[2,93]),{9:$Vo,16:$Vp,38:254,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},{19:[2,112]},{12:[1,255]},{12:[1,256]},{9:$Vo,16:$Vp,38:257,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($Vm,[2,69]),{18:[1,258]},{18:[1,259]},{18:[1,260]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:261,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},o($V01,$Vd1,{81:262,85:$Ve1}),{18:[1,264]},{19:[1,265]},{19:[1,266]},{10:[1,267]},{12:[2,78]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:268,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{2:[1,272],10:[1,270],80:[1,271],86:269},{19:[1,273]},o($V01,[2,91]),o($V01,[2,92]),{2:$V81,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:201,69:154,70:$VV,74:156,75:157,76:$VW,78:274,79:$VX,80:$VY,82:$VZ,84:$V_,89:$V91,90:$Va1},{12:[2,79]},o($V01,[2,86]),{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:275,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{16:[1,276]},{12:[1,277]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:278,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{12:[1,279]},{12:[1,280]},{9:$Vo,16:$Vp,38:281,39:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx},o($V01,[2,90]),{12:[2,82]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:282,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},o($V01,[2,88]),{18:[1,283]},{12:[2,77]},{10:[1,284]},{2:$VS,9:$VT,12:$VU,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:20,33:153,63:285,69:154,70:$VV,74:156,75:157,76:$VW,79:$VX,80:$VY,82:$VZ,84:$V_},{12:[1,286]},o($V01,$Vd1,{81:287,85:$Ve1}),o($V01,[2,89])],
defaultActions: {4:[2,1],5:[2,2],11:[2,6],23:[2,19],24:[2,20],25:[2,21],26:[2,22],27:[2,23],30:[2,10],31:[2,11],32:[2,12],33:[2,13],34:[2,14],35:[2,15],36:[2,16],37:[2,9],39:[2,32],40:[2,33],48:[2,17],49:[2,18],50:[2,4],52:[2,5],54:[2,37],72:[2,39],77:[2,38],130:[2,24],147:[2,28],150:[2,7],151:[2,26],156:[2,74],157:[2,75],165:[2,30],168:[2,71],169:[2,72],172:[2,80],181:[2,84],201:[2,94],208:[2,98],210:[2,99],211:[2,100],212:[2,101],213:[2,102],214:[2,103],215:[2,104],218:[2,111],222:[2,81],233:[2,105],239:[2,95],240:[2,96],242:[2,73],247:[2,112],261:[2,78],268:[2,79],278:[2,82],282:[2,77]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

var listaTokens = [];
var listaErroresLexicos = [];
var listaErroresSintacticos = [];
var traduccion = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:listaTokens.push({tipo: "tk_numero", valor: yy_.yytext, 
                        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_numero";
break;
case 1:listaTokens.push({tipo: "tk_numero", valor: yy_.yytext, 
                        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_decimal";
break;
case 2:listaTokens.push({tipo: "tk_public", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_public";
break;
case 3:listaTokens.push({tipo: "tk_true", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_true";
break;
case 4:listaTokens.push({tipo: "tk_false", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_false";
break;
case 5:listaTokens.push({tipo: "tk_class", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_class";
break;
case 6:listaTokens.push({tipo: "tk_interface", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_interface";
break;
case 7:listaTokens.push({tipo: "tk_void", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_void";
break;
case 8:listaTokens.push({tipo: "tk_for", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_for";
break;
case 9:listaTokens.push({tipo: "tk_while", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_while";
break;
case 10:listaTokens.push({tipo: "tk_do", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_do";
break;
case 11:listaTokens.push({tipo: "tk_if", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_if";
break;
case 12:listaTokens.push({tipo: "tk_else", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_else";
break;
case 13:listaTokens.push({tipo: "tk_break", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_break";
break;
case 14:listaTokens.push({tipo: "tk_continue", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_continue";
break;
case 15:listaTokens.push({tipo: "tk_return", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_return";
break;
case 16:listaTokens.push({tipo: "tk_int", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_int";
break;
case 17:listaTokens.push({tipo: "tk_boolean", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_boolean";
break;
case 18:listaTokens.push({tipo: "tk_double", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_double";
break;
case 19:listaTokens.push({tipo: "tk_string", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_string";
break;
case 20:listaTokens.push({tipo: "tk_char", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_char";
break;
case 21:listaTokens.push({tipo: "tk_static", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_static";
break;
case 22:listaTokens.push({tipo: "tk_main", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_main";
break;
case 23:listaTokens.push({tipo: "tk_args", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_args";
break;
case 24:listaTokens.push({tipo: "tk_system", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_system";
break;
case 25:listaTokens.push({tipo: "tk_out", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_out";
break;
case 26:listaTokens.push({tipo: "tk_print", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_print";
break;
case 27:listaTokens.push({tipo: "tk_println", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_println";
break;
case 28:listaTokens.push({tipo: "tk_llaveA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_llaveA";
break;
case 29:listaTokens.push({tipo: "tk_llaveC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_llaveC";
break;
case 30:listaTokens.push({tipo: "tk_parA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_parA";
break;
case 31:listaTokens.push({tipo: "tk_parC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_parC";
break;
case 32:listaTokens.push({tipo: "tk_coma", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_coma";
break;
case 33:listaTokens.push({tipo: "tk_puntoComa", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_puntoComa";
break;
case 34:listaTokens.push({tipo: "tk_xor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_xor";
break;
case 35:listaTokens.push({tipo: "tk_por", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_por";
break;
case 36:listaTokens.push({tipo: "tk_punto", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_punto";
break;
case 37:listaTokens.push({tipo: "tk_corcheteA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_corcheteA";
break;
case 38:listaTokens.push({tipo: "tk_corcheteC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_corcheteC";
break;
case 39:listaTokens.push({tipo: "tk_mayor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mayor";
break;
case 40:listaTokens.push({tipo: "tk_mayorIgual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mayorIgual";
break;
case 41:listaTokens.push({tipo: "tk_menor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menor";
break;
case 42:listaTokens.push({tipo: "tk_menorIgual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menorIgual";
break;
case 43:listaTokens.push({tipo: "tk_igual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_igual";
break;
case 44:listaTokens.push({tipo: "tk_igualacion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_igualacion";
break;
case 45:listaTokens.push({tipo: "tk_not", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_not";
break;
case 46:listaTokens.push({tipo: "tk_distinto", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_distinto";
break;
case 47:listaTokens.push({tipo: "tk_and", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_and";
break;
case 48:listaTokens.push({tipo: "tk_or", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_or";
break;
case 49:listaTokens.push({tipo: "tk_adicion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_adicion";
break;
case 50:listaTokens.push({tipo: "tk_mas", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mas";
break;
case 51:listaTokens.push({tipo: "tk_sustraccion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_sustraccion";
break;
case 52:listaTokens.push({tipo: "tk_menos", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menos";
break;
case 53:listaTokens.push({tipo: "tk_division", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_division";
break;
case 54:listaTokens.push({tipo: "tk_stringTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_stringTexto";
break;
case 55:listaTokens.push({tipo: "tk_charTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_charTexto";
break;
case 56:yy_.yytext = yy_.yytext.substr(1, yylen-2);
                                        listaTokens.push({tipo: "tk_comentarioIndividual", 
                                        valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
break;
case 57:yy_.yytext = yy_.yytext.substr(1, yylen-2);
                                        listaTokens.push({tipo: "tk_comentarioMultiple", 
                                        valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
break;
case 58:listaTokens.push({tipo: "tk_identificador", 
                        valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_identificador";
break;
case 59:return "EOF";
break;
case 60:
break;
case 61:listaErroresLexicos.push({valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
break;
}
},
rules: [/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:public\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:system\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:[ \t\r\n\f])/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}