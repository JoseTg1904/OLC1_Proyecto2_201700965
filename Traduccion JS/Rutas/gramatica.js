/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,3],$V2=[1,15],$V3=[2,8],$V4=[1,20],$V5=[2,22],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,29],$Vc=[1,34],$Vd=[2,27],$Ve=[1,44],$Vf=[1,43],$Vg=[6,12,22,23,24,25,26],$Vh=[1,55],$Vi=[1,58],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,56],$Vq=[1,57],$Vr=[2,17],$Vs=[18,19,28,33],$Vt=[2,53],$Vu=[1,80],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,81],$VI=[1,82],$VJ=[18,19,28,33,35,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$VK=[1,144],$VL=[2,65],$VM=[1,138],$VN=[1,139],$VO=[1,140],$VP=[1,141],$VQ=[1,142],$VR=[1,143],$VS=[1,166],$VT=[1,167],$VU=[9,12,22,23,24,25,26,66,70,73,74,75,77],$VV=[1,171],$VW=[1,176],$VX=[1,177],$VY=[1,172],$VZ=[1,173],$V_=[1,174],$V$=[1,175],$V01=[2,85],$V11=[1,192],$V21=[2,69],$V31=[1,235];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"PublicoInterClas":4,"EOF":5,"tk_public":6,"InterClas":7,"tk_interface":8,"tk_identificador":9,"tk_llaveA":10,"Definicion":11,"tk_llaveC":12,"tk_class":13,"Instrucciones":14,"TipoFuncion":15,"tk_parA":16,"Parametros":17,"tk_parC":18,"tk_puntoComa":19,"Tipo":20,"tk_void":21,"tk_int":22,"tk_boolean":23,"tk_double":24,"tk_string":25,"tk_char":26,"ListadoParametros":27,"tk_coma":28,"Declaracion":29,"Implementacion":30,"IdentificadorDeclaracion":31,"ListadoDeclaracion":32,"tk_igual":33,"expresion":34,"tk_menos":35,"expresionPrima":36,"tk_not":37,"tk_stringTexto":38,"tk_charTexto":39,"tk_numero":40,"tk_decimal":41,"tk_true":42,"tk_false":43,"tk_and":44,"tk_or":45,"tk_xor":46,"tk_adicion":47,"tk_sustraccion":48,"tk_mayor":49,"tk_menor":50,"tk_mayorIgual":51,"tk_menorIgual":52,"tk_igualacion":53,"tk_distinto":54,"tk_mas":55,"tk_por":56,"tk_division":57,"divTipoFuncion":58,"interno":59,"tk_static":60,"tk_main":61,"tk_corcheteA":62,"tk_corcheteC":63,"tk_args":64,"LlamadoAsignacion":65,"tk_system":66,"tk_punto":67,"tk_out":68,"divPrint":69,"tk_for":70,"DeclaracionFor":71,"internoCiclo":72,"tk_while":73,"tk_do":74,"tk_if":75,"ifElse":76,"tk_return":77,"tipoReturn":78,"tk_else":79,"comprobacionElif":80,"tk_print":81,"tk_println":82,"tk_break":83,"tk_continue":84,"ParametrosLlamado":85,"ListadoDeclaracionParametrosLlamado":86,"divLlamadoAsignacion":87,"IdentificadorDeclaracionFor":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_public",8:"tk_interface",9:"tk_identificador",10:"tk_llaveA",12:"tk_llaveC",13:"tk_class",16:"tk_parA",18:"tk_parC",19:"tk_puntoComa",21:"tk_void",22:"tk_int",23:"tk_boolean",24:"tk_double",25:"tk_string",26:"tk_char",28:"tk_coma",33:"tk_igual",35:"tk_menos",37:"tk_not",38:"tk_stringTexto",39:"tk_charTexto",40:"tk_numero",41:"tk_decimal",42:"tk_true",43:"tk_false",44:"tk_and",45:"tk_or",46:"tk_xor",47:"tk_adicion",48:"tk_sustraccion",49:"tk_mayor",50:"tk_menor",51:"tk_mayorIgual",52:"tk_menorIgual",53:"tk_igualacion",54:"tk_distinto",55:"tk_mas",56:"tk_por",57:"tk_division",60:"tk_static",61:"tk_main",62:"tk_corcheteA",63:"tk_corcheteC",64:"tk_args",66:"tk_system",67:"tk_punto",68:"tk_out",70:"tk_for",73:"tk_while",74:"tk_do",75:"tk_if",77:"tk_return",79:"tk_else",81:"tk_print",82:"tk_println",83:"tk_break",84:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,0],[7,6],[7,6],[7,2],[11,8],[11,0],[15,1],[15,1],[20,1],[20,1],[20,1],[20,1],[20,1],[17,3],[17,0],[27,2],[27,0],[14,2],[14,2],[14,0],[29,3],[31,2],[32,3],[32,2],[32,0],[34,3],[34,3],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,2],[34,4],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,0],[30,2],[58,8],[58,12],[59,2],[59,2],[59,6],[59,12],[59,8],[59,10],[59,9],[59,4],[59,0],[78,1],[78,0],[76,2],[76,0],[80,3],[80,8],[69,5],[69,5],[72,1],[72,3],[72,3],[85,2],[85,2],[85,2],[85,2],[85,2],[85,2],[85,2],[86,2],[86,0],[65,2],[87,4],[87,3],[71,2],[88,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("luego del analisis"); return listado;
break;
case 6:
console.log("error sintactico", yytext)
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1},{1:[3]},{5:[1,4]},{2:[1,8],7:5,8:[1,6],13:[1,7]},{1:[2,1]},{5:[2,2]},{9:[1,9]},{9:[1,10]},{12:[1,11]},{10:[1,12]},{10:[1,13]},{5:[2,6]},{6:$V2,11:14,12:$V3},{6:$V4,12:$V5,14:16,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:17,30:18},{12:[1,26]},{15:27,20:28,21:$Vb,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va},{12:[1,30]},{6:$V4,12:$V5,14:31,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:17,30:18},{6:$V4,12:$V5,14:32,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:17,30:18},{9:$Vc,31:33},{15:36,20:28,21:$Vb,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,58:35,60:[1,37]},{9:[2,11]},{9:[2,12]},{9:[2,13]},{9:[2,14]},{9:[2,15]},{4:38,5:$V0,6:$V1},{9:[1,39]},{9:[2,9]},{9:[2,10]},{4:40,5:$V0,6:$V1},{12:[2,20]},{12:[2,21]},{19:[1,41]},{19:$Vd,28:$Ve,32:42,33:$Vf},o($Vg,[2,54]),{9:[1,45]},{21:[1,46]},{5:[2,4]},{16:[1,47]},{5:[2,5]},o([6,9,12,22,23,24,25,26,66,70,73,74,75,77],[2,23]),{19:[2,24]},{9:$Vh,16:$Vi,34:48,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vc,31:59},{16:[1,60]},{61:[1,61]},{17:62,18:$Vr,20:63,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va},{19:$Vd,28:$Ve,32:64,33:$Vf},{9:$Vh,16:$Vi,34:65,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:66,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},o($Vs,$Vt,{36:67,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:83,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:84,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:85,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:86,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:87,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:88,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),{9:$Vh,16:$Vi,34:89,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{19:[2,26]},{17:90,18:$Vr,20:63,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va},{16:[1,91]},{18:[1,92]},{9:[1,93]},{19:[2,25]},o($Vs,$Vt,{36:94,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:95,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($VJ,[2,30]),{9:$Vh,16:$Vi,34:96,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:97,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:98,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},o($Vs,$Vt,{36:99,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:100,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),{9:$Vh,16:$Vi,34:101,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:102,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:103,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:104,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:105,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:106,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:107,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:108,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:109,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:110,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},o($VJ,[2,31]),o($VJ,[2,32]),o($VJ,[2,33]),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),{18:[1,111]},{18:[1,112]},{25:[1,113]},{19:[1,114]},{18:[2,19],27:115,28:[1,116]},o($VJ,[2,28]),o($VJ,[2,29]),o($Vs,$Vt,{36:117,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:118,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:119,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($VJ,[2,41]),o($VJ,[2,42]),o($Vs,$Vt,{36:120,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:121,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:122,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:123,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:124,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:125,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:126,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:127,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:128,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:129,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vs,$Vt,{36:130,35:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),{10:[1,131]},{62:[1,132]},{6:$V2,11:133,12:$V3},{18:[2,16]},{17:134,18:$Vr,20:63,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va},o($VJ,[2,38]),o($VJ,[2,39]),o($VJ,[2,40]),o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,37]),{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:135,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{63:[1,145]},{12:[2,7]},{18:[2,18]},{12:[1,146]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:147,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:148,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{67:[1,149]},{16:[1,150]},{16:[1,151]},{10:[1,152]},{16:[1,153]},{9:$Vh,16:$Vi,19:[2,67],34:155,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,78:154},{16:[1,157],33:[1,158],87:156},{64:[1,159]},o($Vg,[2,55]),{12:[2,57]},{12:[2,58]},{68:[1,160]},{20:162,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,71:161},{9:$Vh,16:$Vi,34:163,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:165,65:137,66:$VM,70:$VN,72:164,73:$VO,74:$VP,75:$VQ,77:$VR,83:$VS,84:$VT},{9:$Vh,16:$Vi,34:168,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{19:[1,169]},{19:[2,66]},o($VU,[2,86]),{9:$VV,38:$VW,39:$VX,40:$VY,41:$VZ,42:$V_,43:$V$,85:170},{9:$Vh,16:$Vi,34:178,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{18:[1,179]},{67:[1,180]},{19:[1,181]},{9:[1,183],88:182},{18:[1,184]},{12:[1,185]},{12:[2,74]},{19:[1,186]},{19:[1,187]},{18:[1,188]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:189,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{18:[1,190]},{18:$V01,28:$V11,86:191},{18:$V01,28:$V11,86:193},{18:$V01,28:$V11,86:194},{18:$V01,28:$V11,86:195},{18:$V01,28:$V11,86:196},{18:$V01,28:$V11,86:197},{18:$V01,28:$V11,86:198},{19:[1,199]},{10:[1,200]},{69:201,81:[1,202],82:[1,203]},{9:$Vh,16:$Vi,34:204,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{19:[2,89]},{33:[1,205]},{10:[1,206]},{73:[1,207]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:165,65:137,66:$VM,70:$VN,72:208,73:$VO,74:$VP,75:$VQ,77:$VR,83:$VS,84:$VT},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:165,65:137,66:$VM,70:$VN,72:209,73:$VO,74:$VP,75:$VQ,77:$VR,83:$VS,84:$VT},{10:[1,210]},{12:[2,64]},{19:[1,211]},{18:[2,77]},{9:$VV,38:$VW,39:$VX,40:$VY,41:$VZ,42:$V_,43:$V$,85:212},{18:[2,78]},{18:[2,79]},{18:[2,80]},{18:[2,81]},{18:[2,82]},{18:[2,83]},o($VU,[2,88]),{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:213,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:214,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{16:[1,215]},{16:[1,216]},{19:[1,217]},{9:$Vh,16:$Vi,34:218,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:165,65:137,66:$VM,70:$VN,72:219,73:$VO,74:$VP,75:$VQ,77:$VR,83:$VS,84:$VT},{16:[1,220]},{12:[2,75]},{12:[2,76]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:221,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},o($VU,[2,87]),{18:[2,84]},{12:[1,222]},{12:[2,59]},{9:$Vh,16:$Vi,34:223,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:224,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$Vh,16:$Vi,34:225,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{19:[2,90]},{12:[1,226]},{9:$Vh,16:$Vi,34:227,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{12:[1,228]},o($Vg,[2,56]),{18:[1,229]},{18:[1,230]},{18:[1,231]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:232,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{18:[1,233]},o($VU,$V21,{76:234,79:$V31}),{19:[1,236]},{19:[1,237]},{10:[1,238]},{12:[2,61]},{19:[1,239]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:240,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{10:[1,242],75:[1,243],80:241},o($VU,[2,72]),o($VU,[2,73]),{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:165,65:137,66:$VM,70:$VN,72:244,73:$VO,74:$VP,75:$VQ,77:$VR,83:$VS,84:$VT},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:245,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{12:[2,63]},o($VU,[2,68]),{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:246,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{16:[1,247]},{12:[1,248]},{12:[2,62]},{12:[1,249]},{9:$Vh,16:$Vi,34:250,35:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:251,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},o($VU,[2,70]),{18:[1,252]},{12:[2,60]},{10:[1,253]},{9:$VK,12:$VL,20:19,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,29:136,59:254,65:137,66:$VM,70:$VN,73:$VO,74:$VP,75:$VQ,77:$VR},{12:[1,255]},o($VU,$V21,{76:256,79:$V31}),o($VU,[2,71])],
defaultActions: {4:[2,1],5:[2,2],11:[2,6],21:[2,11],22:[2,12],23:[2,13],24:[2,14],25:[2,15],28:[2,9],29:[2,10],31:[2,20],32:[2,21],38:[2,4],40:[2,5],42:[2,24],59:[2,26],64:[2,25],115:[2,16],133:[2,7],134:[2,18],147:[2,57],148:[2,58],155:[2,66],165:[2,74],182:[2,89],189:[2,64],191:[2,77],193:[2,78],194:[2,79],195:[2,80],196:[2,81],197:[2,82],198:[2,83],208:[2,75],209:[2,76],212:[2,84],214:[2,59],218:[2,90],232:[2,61],240:[2,63],245:[2,62],251:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

var listado = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "tk_numero";
break;
case 1:return "tk_decimal";
break;
case 2:listado.push({elemento: "token", tipo: "tk_public", 
                valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column})
                return "tk_public";
break;
case 3:return "tk_true";
break;
case 4:return "tk_false";
break;
case 5:return "tk_class";
break;
case 6:return "tk_interface";
break;
case 7:return "tk_void";
break;
case 8:return "tk_for";
break;
case 9:return "tk_while";
break;
case 10:return "tk_do";
break;
case 11:return "tk_if";
break;
case 12:return "tk_else";
break;
case 13:return "tk_break";
break;
case 14:return "tk_continue";
break;
case 15:return "tk_return";
break;
case 16:return "tk_int";
break;
case 17:return "tk_boolean";
break;
case 18:return "tk_double";
break;
case 19:return "tk_string";
break;
case 20:return "tk_char";
break;
case 21:return "tk_static";
break;
case 22:return "tk_main";
break;
case 23:return "tk_args";
break;
case 24:return "tk_system";
break;
case 25:return "tk_out";
break;
case 26:return "tk_print";
break;
case 27:return "tk_println";
break;
case 28:return "tk_llaveA";
break;
case 29:return "tk_llaveC";
break;
case 30:return "tk_parA";
break;
case 31:return "tk_parC";
break;
case 32:return "tk_coma";
break;
case 33:return "tk_puntoComa";
break;
case 34:return "tk_xor";
break;
case 35:return "tk_por";
break;
case 36:return "tk_punto";
break;
case 37:return "tk_corcheteA";
break;
case 38:return "tk_corcheteC";
break;
case 39:return "tk_mayor";
break;
case 40:return "tk_mayorIgual";
break;
case 41:return "tk_menor";
break;
case 42:return "tk_menorIgual";
break;
case 43:return "tk_igual";
break;
case 44:return "tk_igualacion";
break;
case 45:return "tk_not";
break;
case 46:return "tk_distinto";
break;
case 47:return "tk_and";
break;
case 48:return "tk_or";
break;
case 49:return "tk_mas";
break;
case 50:return "tk_adicion";
break;
case 51:return "tk_menos";
break;
case 52:return "tk_sustraccion";
break;
case 53:return "tk_division";
break;
case 54:return "tk_stringTexto"
break;
case 55:return "tk_charTexto"
break;
case 56:yy_.yytext = yy_.yytext.substr(1, yylen-2); 
                                        return "tk_comentarioIndividual";
break;
case 57:yy_.yytext = yy_.yytext.substr(1, yylen-2); 
                                        return "tk_comentarioMultiple";
break;
case 58:return "tk_identificador";
break;
case 59:return "EOF";
break;
case 60:
break;
case 61:
break;
}
},
rules: [/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:public\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:system\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:--)/i,/^(?:\/)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:[ \t\r\n\f])/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}