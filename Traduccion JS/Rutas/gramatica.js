/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,3],$V2=[1,14],$V3=[1,13],$V4=[2,7],$V5=[1,19],$V6=[1,20],$V7=[2,33],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,40],$Vj=[2,39],$Vk=[1,53],$Vl=[1,52],$Vm=[2,6,12,22,23,24,25,26],$Vn=[1,64],$Vo=[1,67],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,65],$Vw=[1,66],$Vx=[2,24],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[18,19,30,37,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57],$VO=[2,28],$VP=[18,19,30,37,42,43],$VQ=[18,19,30,37,42,43,44,45,46,47,48,49,50,51,53,54,55],$VR=[18,19,30,37,42,43,44,45],$VS=[18,19,30,37,42,43,44,45,46,47],$VT=[18,19,30,37,42,43,44,45,46,47,48,49],$VU=[18,19,30,37,42,43,44,45,46,47,48,49,50,51],$VV=[1,134],$VW=[1,136],$VX=[2,75],$VY=[1,126],$VZ=[1,127],$V_=[1,128],$V$=[1,129],$V01=[1,130],$V11=[1,132],$V21=[1,151],$V31=[1,164],$V41=[1,165],$V51=[2,44],$V61=[1,170],$V71=[1,169],$V81=[2,9,12,22,23,24,25,26,73,76,77,79,81,82],$V91=[1,172],$Va1=[1,177],$Vb1=[1,178],$Vc1=[1,173],$Vd1=[1,174],$Ve1=[1,175],$Vf1=[1,176],$Vg1=[2,105],$Vh1=[1,194],$Vi1=[2,88],$Vj1=[1,235];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"PublicoInterClas":4,"EOF":5,"tk_public":6,"InterClas":7,"tk_interface":8,"tk_identificador":9,"tk_llaveA":10,"Definicion":11,"tk_llaveC":12,"tk_class":13,"Instrucciones":14,"TipoFuncionDef":15,"tk_parA":16,"ParametrosDef":17,"tk_parC":18,"tk_puntoComa":19,"TipoFuncionDefIn":20,"tk_void":21,"tk_int":22,"tk_boolean":23,"tk_double":24,"tk_string":25,"tk_char":26,"TipoFuncion":27,"Tipo":28,"ListadoParametrosDef":29,"tk_coma":30,"Parametros":31,"ListadoParametros":32,"Declaracion":33,"Implementacion":34,"IdentificadorDeclaracion":35,"ListadoDeclaracion":36,"tk_igual":37,"expresion":38,"Declaracion1":39,"IdentificadorDeclaracion1":40,"ListadoDeclaracion1":41,"tk_mas":42,"tk_menos":43,"tk_por":44,"tk_division":45,"tk_mayor":46,"tk_menor":47,"tk_mayorIgual":48,"tk_menorIgual":49,"tk_igualacion":50,"tk_distinto":51,"tk_not":52,"tk_and":53,"tk_or":54,"tk_xor":55,"tk_adicion":56,"tk_sustraccion":57,"tk_stringTexto":58,"tk_charTexto":59,"tk_numero":60,"tk_decimal":61,"tk_true":62,"tk_false":63,"divTipoFuncion":64,"interno":65,"tk_static":66,"tk_main":67,"tk_corcheteA":68,"tk_corcheteC":69,"tk_args":70,"internoLlave":71,"internoPunto":72,"tk_for":73,"DeclaracionFor":74,"internoCiclo":75,"tk_while":76,"tk_if":77,"ifElse":78,"tk_return":79,"tipoReturn":80,"tk_do":81,"tk_system":82,"tk_punto":83,"tk_out":84,"divPrint":85,"LlamadoAsignacion":86,"tk_else":87,"comprobacionElif":88,"tk_print":89,"tk_println":90,"internasCiclo":91,"tk_break":92,"tk_continue":93,"ParametrosLlamado":94,"ListadoDeclaracionParametrosLlamado":95,"divLlamadoAsignacion":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tk_public",8:"tk_interface",9:"tk_identificador",10:"tk_llaveA",12:"tk_llaveC",13:"tk_class",16:"tk_parA",18:"tk_parC",19:"tk_puntoComa",21:"tk_void",22:"tk_int",23:"tk_boolean",24:"tk_double",25:"tk_string",26:"tk_char",30:"tk_coma",37:"tk_igual",42:"tk_mas",43:"tk_menos",44:"tk_por",45:"tk_division",46:"tk_mayor",47:"tk_menor",48:"tk_mayorIgual",49:"tk_menorIgual",50:"tk_igualacion",51:"tk_distinto",52:"tk_not",53:"tk_and",54:"tk_or",55:"tk_xor",56:"tk_adicion",57:"tk_sustraccion",58:"tk_stringTexto",59:"tk_charTexto",60:"tk_numero",61:"tk_decimal",62:"tk_true",63:"tk_false",66:"tk_static",67:"tk_main",68:"tk_corcheteA",69:"tk_corcheteC",70:"tk_args",73:"tk_for",76:"tk_while",77:"tk_if",79:"tk_return",81:"tk_do",82:"tk_system",83:"tk_punto",84:"tk_out",87:"tk_else",89:"tk_print",90:"tk_println",92:"tk_break",93:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,0],[7,6],[7,6],[11,8],[11,0],[11,2],[15,1],[15,1],[20,1],[20,1],[20,1],[20,1],[20,1],[27,1],[27,1],[28,1],[28,1],[28,1],[28,1],[28,1],[17,3],[17,0],[29,2],[29,0],[31,3],[31,0],[32,2],[32,0],[14,2],[14,2],[14,0],[33,3],[33,2],[35,2],[36,3],[36,2],[36,0],[39,3],[40,2],[41,3],[41,2],[41,0],[38,3],[38,3],[38,3],[38,3],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,3],[38,3],[38,3],[38,2],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,3],[34,2],[64,8],[64,12],[65,1],[65,1],[65,0],[71,12],[71,8],[71,9],[72,4],[72,10],[72,2],[72,6],[72,2],[72,2],[80,1],[80,0],[78,2],[78,0],[88,3],[88,8],[85,5],[85,5],[75,1],[75,1],[91,3],[91,3],[94,2],[94,2],[94,2],[94,2],[94,2],[94,2],[94,2],[95,2],[95,0],[86,2],[96,4],[96,3],[74,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("en jison\n" + $$[$0-1] + $$[$0]);
                                var retorno = {tokens: listaTokens, erroresLexicos: listaErroresLexicos,
                                erroresSintacticos: listaErroresSintacticos, traducido: traduccion};
                                listaTokens = [];
                                listaErroresLexicos = [];
                                listaErroresSintacticos = [];
                                traduccion = "";
                                tabulados = "";
                                return retorno;
break;
case 2:
traduccion += $$[$0]; this.$ = $$[$0]
break;
case 3:
traduccion += ""; this.$ = ""
break;
case 4: case 75: case 86: case 88: case 105:
this.$ = "";
break;
case 5:
this.$ = $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + "\n";
break;
case 6: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 33: case 39: case 44:
this.$ = ""
break;
case 8:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de metodos o funciones",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 27:
this.$ = "var " + $$[$0-1] + $$[$0]
break;
case 29: case 38: case 43:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 31: case 32: case 36: case 41:
this.$ = $$[$0-1] + $$[$0]
break;
case 34: case 40:
this.$ = "var " + $$[$0-1] + $$[$0] + "\n";
break;
case 35:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la declaracion de variables",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 37: case 42:
 this.$ = " " + $$[$0-2] + " " + $$[$0-1] + $$[$0];
break;
case 45: case 46: case 47: case 48: case 50: case 51: case 52: case 53: case 54: case 55: case 57: case 58: case 59:
this.$ = $$[$0-2] + " " + $$[$0-1] + " " +  $$[$0];
break;
case 49: case 56: case 60: case 61:
this.$ = $$[$0-1] + " " + $$[$0];
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 73: case 74: case 85: case 93: case 94:
this.$ = $$[$0];
break;
case 69:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0]
break;
case 70:
this.$ = $$[$0]
break;
case 71:
this.$ = "function " + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n";
break;
case 72:
this.$ = "function main()" + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n";
break;
case 76:
this.$ = $$[$0-11] + $$[$0-10] + $$[$0-9] + $$[$0-8] + " " + $$[$0-7] + $$[$0-6] + " " + $$[$0-5] + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0];
break;
case 77:
this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0];
break;
case 78:
this.$ = $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + "\n" + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 79:
this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 80:
this.$ = $$[$0-9] + $$[$0-8] + "\n" + $$[$0-7] + "\n" + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 81: case 82: case 83: case 87: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 106:
this.$ = $$[$0-1] + $$[$0];
break;
case 84:
listaErroresSintacticos.push({encontrado: yytext, 
        esperado: "error en la definicion de return o do while",
        fila: this._$.first_line, columna: this._$.first_column})
break;
case 89:
this.$ = $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 90:
this.$ = " " + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0];
break;
case 91: case 92:
this.$ = "console.log" + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 95: case 96:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 107:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 108:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0] + "\n";
break;
case 109:
this.$ = "var " + $$[$0-2] + $$[$0-1] + $$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:$V1},{1:[3]},{5:[1,4]},{7:5,8:[1,6],13:[1,7]},{1:[2,1]},{5:[2,2]},{9:[1,8]},{9:[1,9]},{10:[1,10]},{10:[1,11]},{2:$V2,6:$V3,11:12,12:$V4},{2:$V5,6:$V6,12:$V7,14:15,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:18,33:16,34:17},{12:[1,26]},{15:27,20:28,21:[1,29],22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},{19:[1,35]},{12:[1,36]},{2:$V5,6:$V6,12:$V7,14:37,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:18,33:16,34:17},{2:$V5,6:$V6,12:$V7,14:38,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:18,33:16,34:17},{9:$Vi,35:39},{19:[1,41]},{21:[1,46],22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:43,28:45,64:42,66:[1,44]},{9:[2,18]},{9:[2,19]},{9:[2,20]},{9:[2,21]},{9:[2,22]},{4:47,5:$V0,6:$V1},{9:[1,48]},{9:[2,9]},{9:[2,10]},{9:[2,11]},{9:[2,12]},{9:[2,13]},{9:[2,14]},{9:[2,15]},{12:[2,8]},{4:49,5:$V0,6:$V1},{12:[2,31]},{12:[2,32]},{19:[1,50]},{19:$Vj,30:$Vk,36:51,37:$Vl},o($Vm,[2,35]),o($Vm,[2,70]),{9:[1,54]},{21:[1,55]},{9:[2,16]},{9:[2,17]},{5:[2,4]},{16:[1,56]},{5:[2,5]},o($Vm,[2,34]),{19:[2,36]},{9:$Vn,16:$Vo,38:57,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vi,35:68},{16:[1,69]},{67:[1,70]},{17:71,18:$Vx,20:72,22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},{19:$Vj,30:$Vk,36:73,37:$Vl,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{9:$Vn,16:$Vo,38:89,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:90,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VN,[2,62]),o($VN,[2,63]),o($VN,[2,64]),o($VN,[2,65]),o($VN,[2,66]),o($VN,[2,67]),o($VN,[2,68]),{9:$Vn,16:$Vo,38:91,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:[2,38]},{18:$VO,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:93,31:92},{16:[1,94]},{18:[1,95]},{9:[1,96]},{19:[2,37]},{9:$Vn,16:$Vo,38:97,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:98,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:99,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:100,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:101,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:102,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:103,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:104,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:105,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:106,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:107,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:108,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:109,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VN,[2,60]),o($VN,[2,61]),o($VP,[2,49],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VQ,[2,56],{56:$VL,57:$VM}),{18:[1,110],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{18:[1,111]},{9:[1,112]},{25:[1,113]},{19:[1,114]},{18:[2,26],29:115,30:[1,116]},o($VP,[2,45],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VP,[2,46],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VR,[2,47],{46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VR,[2,48],{46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VS,[2,50],{48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VS,[2,51],{48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VT,[2,52],{50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VT,[2,53],{50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VU,[2,54],{53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VU,[2,55],{53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM}),o($VQ,[2,57],{56:$VL,57:$VM}),o($VQ,[2,58],{56:$VL,57:$VM}),o($VQ,[2,59],{56:$VL,57:$VM}),o($VN,[2,69]),{10:[1,117]},{18:[2,30],30:[1,119],32:118},{68:[1,120]},{2:$V2,6:$V3,11:121,12:$V4},{18:[2,23]},{17:122,18:$Vx,20:72,22:$Vd,23:$Ve,24:$Vf,25:$Vg,26:$Vh},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:123,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{18:[2,27]},{18:$VO,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:93,31:137},{69:[1,138]},{12:[2,6]},{18:[2,25]},{12:[1,139]},{12:[2,73]},{12:[2,74]},{16:[1,140]},{16:[1,141]},{16:[1,142]},{9:$Vn,16:$Vo,19:[2,86],38:144,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,80:143},{10:[1,145]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:146,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{83:[1,147]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:148,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{19:[1,149]},{9:$V21,40:150},{16:[1,153],37:[1,154],96:152},{18:[2,29]},{70:[1,155]},o($Vm,[2,71]),{22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:157,74:156},{9:$Vn,16:$Vo,38:158,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:159,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:[1,160]},{19:[2,85],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:162,71:124,72:125,73:$VY,75:161,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133,91:163,92:$V31,93:$V41},{12:[2,81]},{84:[1,166]},{12:[2,83]},{12:[2,84]},{19:[1,167]},{19:$V51,30:$V61,37:$V71,41:168},o($V81,[2,106]),{9:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,94:171},{9:$Vn,16:$Vo,38:179,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{18:[1,180]},{19:[1,181]},{9:[1,182]},{18:[1,183],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{18:[1,184],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:185,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{12:[1,186]},{12:[2,93]},{12:[2,94]},{19:[1,187]},{19:[1,188]},{83:[1,189]},o($V81,[2,40]),{19:[2,41]},{9:$Vn,16:$Vo,38:190,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$V21,40:191},{18:[1,192]},{18:$Vg1,30:$Vh1,95:193},{18:$Vg1,30:$Vh1,95:195},{18:$Vg1,30:$Vh1,95:196},{18:$Vg1,30:$Vh1,95:197},{18:$Vg1,30:$Vh1,95:198},{18:$Vg1,30:$Vh1,95:199},{18:$Vg1,30:$Vh1,95:200},{19:[1,201],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{10:[1,202]},{9:$Vn,16:$Vo,38:203,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{37:[1,204]},{10:[1,205]},{10:[1,206]},{12:[2,79]},{76:[1,207]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:162,71:124,72:125,73:$VY,75:208,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133,91:163,92:$V31,93:$V41},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:162,71:124,72:125,73:$VY,75:209,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133,91:163,92:$V31,93:$V41},{85:210,89:[1,211],90:[1,212]},{19:$V51,30:$V61,37:$V71,41:213,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{19:[2,43]},{19:[1,214]},{18:[2,97]},{9:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,94:215},{18:[2,98]},{18:[2,99]},{18:[2,100]},{18:[2,101]},{18:[2,102]},{18:[2,103]},o($V81,[2,108]),{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:216,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{19:[1,217],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{9:$Vn,16:$Vo,38:218,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:162,71:124,72:125,73:$VY,75:219,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133,91:163,92:$V31,93:$V41},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:220,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{16:[1,221]},{12:[2,95]},{12:[2,96]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:222,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{16:[1,223]},{16:[1,224]},{19:[2,42]},o($V81,[2,107]),{18:[2,104]},{12:[1,225]},{9:$Vn,16:$Vo,38:226,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:[2,109],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{12:[1,227]},{12:[1,228]},{9:$Vn,16:$Vo,38:229,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{12:[2,82]},{9:$Vn,16:$Vo,38:230,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{9:$Vn,16:$Vo,38:231,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($Vm,[2,72]),{18:[1,232],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:233,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},o($V81,$Vi1,{78:234,87:$Vj1}),{18:[1,236],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{18:[1,237],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{18:[1,238],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{10:[1,239]},{12:[2,77]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:240,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{10:[1,242],77:[1,243],88:241},{19:[1,244]},{19:[1,245]},{19:[1,246]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:162,71:124,72:125,73:$VY,75:247,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133,91:163,92:$V31,93:$V41},{12:[2,78]},o($V81,[2,87]),{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:248,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{16:[1,249]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:250,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},o($V81,[2,91]),o($V81,[2,92]),{12:[1,251]},{12:[1,252]},{9:$Vn,16:$Vo,38:253,43:$Vp,52:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{12:[2,80]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:254,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},o($V81,[2,89]),{18:[1,255],42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM},{12:[2,76]},{10:[1,256]},{2:$VV,9:$VW,12:$VX,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,28:135,39:131,65:257,71:124,72:125,73:$VY,76:$VZ,77:$V_,79:$V$,81:$V01,82:$V11,86:133},{12:[1,258]},o($V81,$Vi1,{78:259,87:$Vj1}),o($V81,[2,90])],
defaultActions: {4:[2,1],5:[2,2],21:[2,18],22:[2,19],23:[2,20],24:[2,21],25:[2,22],28:[2,9],29:[2,10],30:[2,11],31:[2,12],32:[2,13],33:[2,14],34:[2,15],35:[2,8],37:[2,31],38:[2,32],45:[2,16],46:[2,17],47:[2,4],49:[2,5],51:[2,36],68:[2,38],73:[2,37],115:[2,23],118:[2,27],121:[2,6],122:[2,25],124:[2,73],125:[2,74],137:[2,29],146:[2,81],148:[2,83],149:[2,84],162:[2,93],163:[2,94],168:[2,41],185:[2,79],191:[2,43],193:[2,97],195:[2,98],196:[2,99],197:[2,100],198:[2,101],199:[2,102],200:[2,103],208:[2,95],209:[2,96],213:[2,42],215:[2,104],222:[2,82],233:[2,77],240:[2,78],250:[2,80],254:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

var listaTokens = [];
var listaErroresLexicos = [];
var listaErroresSintacticos = [];
var traduccion = "";
var tabulados = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:listaTokens.push({tipo: "tk_decimal", valor: yy_.yytext, 
                        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_decimal";
break;
case 1:listaTokens.push({tipo: "tk_numero", valor: yy_.yytext, 
                        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_numero";
break;
case 2:listaTokens.push({tipo: "tk_public", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_public";
break;
case 3:listaTokens.push({tipo: "tk_true", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_true";
break;
case 4:listaTokens.push({tipo: "tk_false", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_false";
break;
case 5:listaTokens.push({tipo: "tk_class", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_class";
break;
case 6:listaTokens.push({tipo: "tk_interface", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_interface";
break;
case 7:listaTokens.push({tipo: "tk_void", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_void";
break;
case 8:listaTokens.push({tipo: "tk_for", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_for";
break;
case 9:listaTokens.push({tipo: "tk_while", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_while";
break;
case 10:listaTokens.push({tipo: "tk_do", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_do";
break;
case 11:listaTokens.push({tipo: "tk_if", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_if";
break;
case 12:listaTokens.push({tipo: "tk_else", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_else";
break;
case 13:listaTokens.push({tipo: "tk_break", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_break";
break;
case 14:listaTokens.push({tipo: "tk_continue", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_continue";
break;
case 15:listaTokens.push({tipo: "tk_return", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_return";
break;
case 16:listaTokens.push({tipo: "tk_int", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_int";
break;
case 17:listaTokens.push({tipo: "tk_boolean", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_boolean";
break;
case 18:listaTokens.push({tipo: "tk_double", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_double";
break;
case 19:listaTokens.push({tipo: "tk_string", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_string";
break;
case 20:listaTokens.push({tipo: "tk_char", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_char";
break;
case 21:listaTokens.push({tipo: "tk_static", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_static";
break;
case 22:listaTokens.push({tipo: "tk_main", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_main";
break;
case 23:listaTokens.push({tipo: "tk_args", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_args";
break;
case 24:listaTokens.push({tipo: "tk_system", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_system";
break;
case 25:listaTokens.push({tipo: "tk_out", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_out";
break;
case 26:listaTokens.push({tipo: "tk_println", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_println";
break;
case 27:listaTokens.push({tipo: "tk_print", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_print";
break;
case 28:
break;
case 29:
break;
case 30:listaTokens.push({tipo: "tk_llaveA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_llaveA";
break;
case 31:listaTokens.push({tipo: "tk_llaveC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_llaveC";
break;
case 32:listaTokens.push({tipo: "tk_parA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_parA";
break;
case 33:listaTokens.push({tipo: "tk_parC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_parC";
break;
case 34:listaTokens.push({tipo: "tk_coma", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_coma";
break;
case 35:listaTokens.push({tipo: "tk_puntoComa", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_puntoComa";
break;
case 36:listaTokens.push({tipo: "tk_xor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_xor";
break;
case 37:listaTokens.push({tipo: "tk_por", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_por";
break;
case 38:listaTokens.push({tipo: "tk_punto", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_punto";
break;
case 39:listaTokens.push({tipo: "tk_corcheteA", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_corcheteA";
break;
case 40:listaTokens.push({tipo: "tk_corcheteC", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_corcheteC";
break;
case 41:listaTokens.push({tipo: "tk_mayorIgual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mayorIgual";
break;
case 42:listaTokens.push({tipo: "tk_mayor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mayor";
break;
case 43:listaTokens.push({tipo: "tk_menorIgual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menorIgual";
break;
case 44:listaTokens.push({tipo: "tk_menor", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menor";
break;
case 45:listaTokens.push({tipo: "tk_igualacion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_igualacion";
break;
case 46:listaTokens.push({tipo: "tk_igual", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_igual";
break;
case 47:listaTokens.push({tipo: "tk_distinto", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_distinto";
break;
case 48:listaTokens.push({tipo: "tk_not", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_not";
break;
case 49:listaTokens.push({tipo: "tk_and", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_and";
break;
case 50:listaTokens.push({tipo: "tk_or", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_or";
break;
case 51:listaTokens.push({tipo: "tk_adicion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_adicion";
break;
case 52:listaTokens.push({tipo: "tk_mas", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_mas";
break;
case 53:listaTokens.push({tipo: "tk_sustraccion", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_sustraccion";
break;
case 54:listaTokens.push({tipo: "tk_menos", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_menos";
break;
case 55:listaTokens.push({tipo: "tk_division", valor: yy_.yytext, 
        fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
        return "tk_division";
break;
case 56:listaTokens.push({tipo: "tk_stringTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_stringTexto";
break;
case 57:listaTokens.push({tipo: "tk_stringTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_stringTexto";
break;
case 58:listaTokens.push({tipo: "tk_charTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_charTexto";
break;
case 59:listaTokens.push({tipo: "tk_charTexto", valor: yy_.yytext, 
                fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                return "tk_charTexto";
break;
case 60:listaTokens.push({tipo: "tk_identificador", 
                        valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
                        return "tk_identificador";
break;
case 61:return "EOF";
break;
case 62:
break;
case 63:listaErroresLexicos.push({valor: yy_.yytext, fila: yy_.yylloc.first_line, columna: yy_.yylloc.first_column});
break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:public\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:system\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:"[^\"]*")/i,/^(?:“[^\“]*“)/i,/^(?:'[^\']*')/i,/^(?:‘[^\‘]*‘)/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:[ \t\r\n\f])/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}